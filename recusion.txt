1- Take as input str, a string. We are concerned with all the possible subsequences
of str. E.g. “abcd” has following subsequences “”, “d”, “c”, “cd”, “b”, “bd”, “bc”,
“bcd”, “a”, “ad”, “ac”, “acd”, “ab”, “abd”, “abc”, “abcd”.


2-Take as input str, a string. We are concerned with all possible permutations of
characters in str. E.g. “abc” can produce following words “abc”, “acb”, “bac”,
“bca”, “cab”, “cba”

3-Take as input N, a number. Take N more inputs and store that in an array.
a. Write a recursive function which counts the number of ways the array
could be split in two groups, so that the sum of items in both groups is
equal. Each number in the array must belong to one of the two groups.
Print the value returned.

4-Take as input N, a number. Take N more inputs and store that in an array. Take as
input target, a number
a. Write a recursive function which counts the number of subsets of the array
which sum to target. Print the value returned.

5-Subset Sum Problem

6-Min Cost Path

Sol

1=/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		String s="abcd";
		ArrayList<Character> A=new ArrayList<Character>();
		
		fun(s,A,0);
	}
	static void fun(String s,ArrayList<Character> A,int i)
	{
		System.out.println(A);
		for(int j=i;j<s.length();j++)
		{
			A.add(s.charAt(j));
			fun(s,A,j+1);
			int index=A.indexOf(s.charAt(j));
			A.remove(index);
		}
	}
}



